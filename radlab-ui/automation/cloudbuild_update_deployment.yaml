# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: 'Copy the Config Files from GCS bucket to Local'
    name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Check if the TAR file has already been uploaded.  If not, this is an initial deployment"
        TAR_FILE_EXISTS=$(gsutil ls gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/files/${_MODULE_NAME}.tar.gz > /dev/null 2>&1)

        if [[ "$?" -ne "0" ]]
        then
          echo "Archive with deployed files does not exist yet, running first deploy."
          gsutil cp gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/files/terraform.tfvars.json ./terraform.tfvars.json
          gsutil cp gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/files/backend.tf ./backend.tf
        else
          echo "Updating existing deployment"

          rm -rfv *
          gsutil -m cp -r gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/files/* .
          tar -xzf ${_MODULE_NAME}.tar.gz
          gsutil cp gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/files/terraform.tfvars.json ./terraform.tfvars.json
          rm -rf ${_MODULE_NAME}.tar.gz
        fi
    dir: ./modules/${_MODULE_NAME}

  # Terraform apply is run a second time in case the first run fails.  Sometimes Terraform runs into an internal error, in which case the pipeline
  # will try to apply the changes a second time.
  - id: 'Apply'
    name: '${_TERRAFORM_IMAGE_NAME}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ ! -d ".terraform" ]]; then
          echo "First time initialising Terraform"
          terraform init
        fi

        if ! terraform apply -auto-approve; then
          terraform apply -auto-approve
        fi
    dir: ./modules/${_MODULE_NAME}

  - id: 'Refresh'
    name: '${_TERRAFORM_IMAGE_NAME}'
    args: [ 'apply', '-refresh-only', '-auto-approve' ]
    dir: ./modules/${_MODULE_NAME}

  - id: 'Output'
    name: '${_TERRAFORM_IMAGE_NAME}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        terraform output -json > output.json
        gsutil -m cp output.json gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/output/output.json
    dir: ./modules/${_MODULE_NAME}

  - id: 'Upload files'
    name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        tar -czf ${_MODULE_NAME}.tar.gz -C ${_MODULE_NAME} .
        gsutil -m cp ${_MODULE_NAME}.tar.gz gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/files
    dir: ./modules

options:
  logging: GCS_ONLY
  logStreamingOption: STREAM_ON
logsBucket: 'gs://${_DEPLOYMENT_BUCKET_ID}/deployments/${_MODULE_NAME}_${_DEPLOYMENT_ID}/logs'
timeout: 7200s
